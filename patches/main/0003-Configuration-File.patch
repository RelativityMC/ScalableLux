From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Sun, 24 Mar 2024 14:04:58 +0800
Subject: [PATCH] Configuration File


diff --git a/src/main/java/ca/spottedleaf/starlight/common/ScalableLuxEntrypoint.java b/src/main/java/ca/spottedleaf/starlight/common/ScalableLuxEntrypoint.java
index 3d65275..df74ac1 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/ScalableLuxEntrypoint.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/ScalableLuxEntrypoint.java
@@ -1,9 +1,11 @@
 package ca.spottedleaf.starlight.common;
 
+import ca.spottedleaf.starlight.common.config.Config;
 import net.fabricmc.api.ModInitializer;
 
 public class ScalableLuxEntrypoint implements ModInitializer {
     @Override
     public void onInitialize() {
+        Config.init();
     }
 }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/config/Config.java b/src/main/java/ca/spottedleaf/starlight/common/config/Config.java
new file mode 100644
index 0000000..bb77b7d
--- /dev/null
+++ b/src/main/java/ca/spottedleaf/starlight/common/config/Config.java
@@ -0,0 +1,99 @@
+package ca.spottedleaf.starlight.common.config;
+
+import net.fabricmc.loader.api.FabricLoader;
+import net.fabricmc.loader.api.ModContainer;
+import net.fabricmc.loader.api.metadata.CustomValue;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+import java.util.Properties;
+
+public class Config {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    static {
+        final Properties properties = new Properties();
+        final Properties newProperties = new Properties();
+        final Path path = FabricLoader.getInstance().getConfigDir().resolve("scalablelux.properties");
+        if (Files.isRegularFile(path)) {
+            try (InputStream in = Files.newInputStream(path, StandardOpenOption.CREATE)) {
+                properties.load(in);
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+
+        if (!newProperties.isEmpty()) {
+            try (OutputStream out = Files.newOutputStream(path, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {
+                newProperties.store(out, "Configuration file for ScalableLux");
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    public static void init() {
+    }
+
+    private static int getInt(Properties properties, Properties newProperties, String key, int def) {
+        try {
+            final int i = Integer.parseInt(properties.getProperty(key));
+            newProperties.setProperty(key, String.valueOf(i));
+            return i;
+        } catch (NumberFormatException e) {
+            newProperties.setProperty(key, String.valueOf(def));
+            return def;
+        }
+    }
+
+    private static boolean getBoolean(Properties properties, Properties newProperties, String key, boolean def) {
+        boolean boolean0 = getBoolean0(properties, newProperties, key, def);
+        for (ModContainer modContainer : FabricLoader.getInstance().getAllMods()) {
+            final CustomValue incompatibilitiesValue = modContainer.getMetadata().getCustomValue("scalablelux:incompatibleConfig");
+            if (incompatibilitiesValue != null && incompatibilitiesValue.getType() == CustomValue.CvType.ARRAY) {
+                final CustomValue.CvArray incompatibilities = incompatibilitiesValue.getAsArray();
+                for (CustomValue value : incompatibilities) {
+                    if (value.getType() == CustomValue.CvType.STRING && value.getAsString().equals(key)) {
+                        final String message;
+                        if (Boolean.getBoolean("scalablelux.ignoreIncompatibleConfig")) {
+                            message = String.format("Ignoring incompatibility of %s (defined in %s@%s)",
+                                    key, modContainer.getMetadata().getId(), modContainer.getMetadata().getVersion().getFriendlyString());
+                        } else {
+                            message = String.format("Forcing %s in scalablelux.properties to be disabled (defined in %s@%s)",
+                                    key, modContainer.getMetadata().getId(), modContainer.getMetadata().getVersion().getFriendlyString());
+                            boolean0 = false;
+                        }
+                        LOGGER.warn(message);
+                    }
+                }
+            }
+        }
+        return boolean0;
+    }
+
+    private static boolean getBoolean0(Properties properties, Properties newProperties, String key, boolean def) {
+        try {
+            final boolean b = parseBoolean(properties.getProperty(key));
+            newProperties.setProperty(key, String.valueOf(b));
+            return b;
+        } catch (NumberFormatException e) {
+            newProperties.setProperty(key, String.valueOf(def));
+            return def;
+        }
+    }
+
+    private static boolean parseBoolean(String string) {
+        if (string == null) throw new NumberFormatException("null");
+        if (string.trim().equalsIgnoreCase("true")) return true;
+        if (string.trim().equalsIgnoreCase("false")) return false;
+        throw new NumberFormatException(string);
+    }
+
+}
